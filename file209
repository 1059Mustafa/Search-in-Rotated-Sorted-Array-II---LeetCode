class Solution {
public:
    
    
    int find(vector<int>nums)
    {
        int n = nums.size();
        int pivot = 0;
        for(int i = 0 ; i < n-1 ; i++)
        {
            // if(nums[i] == target)
            //     return true;
            if(nums[i+1] < nums[i])
            {
                pivot = i+1;
                return pivot;
            }
        }
        return 0;
        
    }
    
    
    int binary(vector<int>num,int l,int r,int k)
    {
        while(l<=r)
        {
            int mid=(l+r)/2;
            if(num[mid]==k)
            {
                return 1;
            }
            else if(num[mid]>k)
            {
                r=mid-1;
            }
            else
            {
                l=mid+1;
            }
        }
        return 0;
    }
    
    bool search(vector<int>& nums, int target) 
    {
        int l=0;
        int r=nums.size()-1;
        int n=nums.size();
        if(nums[0]==target)
        {
            return true;
        }
        
        int mid=find(nums);
        
        return max(binary(nums,l,mid-1,target),binary(nums,mid,r,target));
        
        
    }
};
